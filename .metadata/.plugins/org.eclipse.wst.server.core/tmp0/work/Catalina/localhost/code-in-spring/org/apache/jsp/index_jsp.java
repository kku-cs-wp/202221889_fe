/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.26
 * Generated at: 2024-12-12 00:10:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.net.URLEncoder;
import java.net.URLDecoder;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/Users/woojin/Downloads/202221889_fe/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/code-in-spring-main(202221889_최우진_고웹)/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/fn.tld", Long.valueOf(1664421078000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar", Long.valueOf(1664453510000L));
    _jspx_dependants.put("jar:file:/Users/woojin/Downloads/202221889_fe/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/code-in-spring-main(202221889_최우진_고웹)/WEB-INF/lib/jakarta.servlet.jsp.jstl-3.0.1.jar!/META-INF/c.tld", Long.valueOf(1664421078000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("<title>공모전 다모아</title>\n");
      out.write("<link\n");
      out.write("	href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\"\n");
      out.write("	rel=\"stylesheet\">\n");
      out.write("<style>\n");
      out.write("* {\n");
      out.write("	margin: 0;\n");
      out.write("	padding: 0;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("	font-family: 'Arial', sans-serif;\n");
      out.write("	background-color: #f0f4f8;\n");
      out.write("	margin: 0;\n");
      out.write("	padding: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 헤더 스타일 수정 */\n");
      out.write("header {\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("	padding: 10px 20px; /* 여백을 적당하게 설정 */\n");
      out.write("	text-align: left; /* 왼쪽 정렬 */\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: space-between; /* 양 끝 정렬 */\n");
      out.write("	align-items: center; /* 세로 가운데 정렬 */\n");
      out.write("	font-size: 20px;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 메뉴 버튼 스타일 */\n");
      out.write("header button {\n");
      out.write("	background-color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 8px 16px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 18px;\n");
      out.write("	color: #007bff;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 메뉴 버튼 호버 효과 */\n");
      out.write("header button:hover {\n");
      out.write("	background-color: #0056b3;\n");
      out.write("	color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 모달 배경 스타일 */\n");
      out.write("#modal-background {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 0;\n");
      out.write("	left: 0;\n");
      out.write("	width: 100%;\n");
      out.write("	height: 100%;\n");
      out.write("	background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("	z-index: 999;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 모달 창 스타일 */\n");
      out.write("#modal {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	background-color: white;\n");
      out.write("	width: 400px;\n");
      out.write("	padding: 20px;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n");
      out.write("	z-index: 1000;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 모달의 content div 스타일 */\n");
      out.write("#modal-content {\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#modal-content h2 {\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#modal-content p {\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#modal button {\n");
      out.write("	background-color: #007bff;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 10px 20px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#modal button:hover {\n");
      out.write("	background-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	width: 90%;\n");
      out.write("	max-width: 500px;\n");
      out.write("	background-color: #ffffff;\n");
      out.write("	padding: 30px;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n");
      out.write("	z-index: 1000;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal h2 {\n");
      out.write("	font-size: 24px;\n");
      out.write("	color: #333;\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form {\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form label {\n");
      out.write("	width: 100%;\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	text-align: left;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form label {\n");
      out.write("    width: 100%;\n");
      out.write("    margin-bottom: 20px;  /* 아래쪽 여백을 20px로 설정 */\n");
      out.write("    font-size: 16px;\n");
      out.write("    text-align: left;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form select {\n");
      out.write("    width: 100%;\n");
      out.write("    padding: 12px;\n");
      out.write("    font-size: 16px;\n");
      out.write("    margin: 8px 0;\n");
      out.write("    border-radius: 6px;\n");
      out.write("    border: 1px solid #ddd;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    transition: border-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form select:focus {\n");
      out.write("    border-color: #007bff;\n");
      out.write("    outline: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form input[type=\"text\"], #add-modal form input[type=\"date\"],\n");
      out.write("	#add-modal form input[type=\"url\"] {\n");
      out.write("	width: 100%;\n");
      out.write("	padding: 12px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	margin: 8px 0;\n");
      out.write("	border-radius: 6px;\n");
      out.write("	border: 1px solid #ddd;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("	transition: border-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form input[type=\"text\"]:focus, #add-modal form input[type=\"date\"]:focus,\n");
      out.write("	#add-modal form input[type=\"url\"]:focus {\n");
      out.write("	border-color: #007bff;\n");
      out.write("	outline: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form button[type=\"submit\"], #add-modal form button[type=\"button\"]\n");
      out.write("	{\n");
      out.write("	background-color: #007bff;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 12px 100px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	transition: background-color 0.3s ease;\n");
      out.write("	margin-top: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form button[type=\"submit\"]:hover, #add-modal form button[type=\"button\"]:hover\n");
      out.write("	{\n");
      out.write("	background-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form button[type=\"button\"] {\n");
      out.write("	background-color: #f44336;\n");
      out.write("	margin-top: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal form button[type=\"button\"]:hover {\n");
      out.write("	background-color: #d32f2f;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 공모전 수정 모달 스타일 */\n");
      out.write("#edit-modal {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	width: 80%;\n");
      out.write("	max-width: 500px;\n");
      out.write("	background-color: white;\n");
      out.write("	padding: 30px;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n");
      out.write("	z-index: 1000;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal h2 {\n");
      out.write("	font-size: 24px;\n");
      out.write("	color: #333;\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form {\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form label {\n");
      out.write("	width: 100%;\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	text-align: left;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form input[type=\"text\"], #edit-modal form input[type=\"date\"],\n");
      out.write("	#edit-modal form input[type=\"url\"] {\n");
      out.write("	width: 100%;\n");
      out.write("	padding: 12px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	margin: 8px 0;\n");
      out.write("	border-radius: 6px;\n");
      out.write("	border: 1px solid #ddd;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("	transition: border-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form input[type=\"text\"]:focus, #edit-modal form input[type=\"date\"]:focus,\n");
      out.write("	#edit-modal form input[type=\"url\"]:focus {\n");
      out.write("	border-color: #007bff;\n");
      out.write("	outline: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form button[type=\"submit\"], #edit-modal form button[type=\"button\"]\n");
      out.write("	{\n");
      out.write("	background-color: #007bff;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 12px 100px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	transition: background-color 0.3s ease;\n");
      out.write("	margin-top: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form button[type=\"submit\"]:hover, #edit-modal form button[type=\"button\"]:hover\n");
      out.write("	{\n");
      out.write("	background-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form button[type=\"button\"] {\n");
      out.write("	background-color: #f44336;\n");
      out.write("	margin-top: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#edit-modal form button[type=\"button\"]:hover {\n");
      out.write("	background-color: #d32f2f;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 공모전 삭제 모달 스타일 */\n");
      out.write("#delete-modal {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	width: 90%;\n");
      out.write("	max-width: 500px;\n");
      out.write("	background-color: #ffffff;\n");
      out.write("	padding: 30px;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n");
      out.write("	z-index: 1000;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal h2 {\n");
      out.write("	font-size: 24px;\n");
      out.write("	color: #333;\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal p {\n");
      out.write("	font-size: 16px;\n");
      out.write("	color: #555;\n");
      out.write("	margin-bottom: 30px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal span {\n");
      out.write("	color: #f44336;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons {\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: center;\n");
      out.write("	gap: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons button {\n");
      out.write("	padding: 12px 24px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	border: none;\n");
      out.write("	transition: background-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons .delete-button {\n");
      out.write("	background-color: #f44336;\n");
      out.write("	color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons .delete-button:hover {\n");
      out.write("	background-color: #d32f2f;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons .cancel-button {\n");
      out.write("	background-color: #2196f3;\n");
      out.write("	color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#delete-modal .modal-buttons .cancel-button:hover {\n");
      out.write("	background-color: #1976d2;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 팝업 메시지 스타일 */\n");
      out.write("#popup-message {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	width: 300px;\n");
      out.write("	background-color: white;\n");
      out.write("	box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n");
      out.write("	border-radius: 10px;\n");
      out.write("	z-index: 2000;\n");
      out.write("	padding: 20px;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#popup-message h2 {\n");
      out.write("	font-size: 18px;\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#popup-message p {\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#popup-message button {\n");
      out.write("	background-color: #007bff;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 10px 20px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#popup-message button:hover {\n");
      out.write("	background-color: #0056b3;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 배경 어둡게 처리 */\n");
      out.write("#popup-background {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	top: 0;\n");
      out.write("	left: 0;\n");
      out.write("	width: 100%;\n");
      out.write("	height: 100%;\n");
      out.write("	background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("	z-index: 1999;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#site-name {\n");
      out.write("	color: white;\n");
      out.write("	text-decoration: none;\n");
      out.write("	font-size: 24px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#site-name:hover {\n");
      out.write("	color: #e0e0e0; /* 사이트 이름을 클릭할 때 색상 변화 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("#auth-section {\n");
      out.write("	display: flex;\n");
      out.write("	align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#auth-section button {\n");
      out.write("	background-color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 10px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 18px;\n");
      out.write("	color: #007bff;\n");
      out.write("	margin-left: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#auth-section button:hover {\n");
      out.write("	background-color: #0056b3;\n");
      out.write("	color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".layout {\n");
      out.write("	display: flex;\n");
      out.write("	flex: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".sidebar-container {\n");
      out.write("	width: 250px;\n");
      out.write("	background-color: #343a40;\n");
      out.write("	color: white;\n");
      out.write("	padding: 20px;\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	height: 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".sidebar-container.hidden {\n");
      out.write("	width: 0;\n");
      out.write("	padding: 0;\n");
      out.write("	overflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav ul {\n");
      out.write("	list-style: none;\n");
      out.write("	padding-left: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav ul li {\n");
      out.write("	margin-bottom: 15px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav ul li a {\n");
      out.write("	color: white;\n");
      out.write("	text-decoration: none;\n");
      out.write("	font-size: 18px;\n");
      out.write("	display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav ul li a:hover {\n");
      out.write("	color: #007bff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".submenu {\n");
      out.write("	margin-left: 20px;\n");
      out.write("	display: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".submenu.active {\n");
      out.write("	display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write("main {\n");
      out.write("	flex: 1;\n");
      out.write("	padding: 20px;\n");
      out.write("	position: relative;\n");
      out.write("	overflow-y: auto; /* 메인 콘텐츠에서 스크롤이 가능하게 설정 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".page-card {\n");
      out.write("	display: none;\n");
      out.write("	width: 100%;\n");
      out.write("	min-height: 100%; /* 페이지 카드의 높이를 부모 요소에 맞추어 설정 */\n");
      out.write("	padding: 20px;\n");
      out.write("	background-color: white;\n");
      out.write("	overflow-y: auto; /* 페이지 카드 내에서 스크롤 가능 */\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".page-card-home {\n");
      out.write("	display: none;\n");
      out.write("	width: 100%;\n");
      out.write("	min-height: 100%; /* 페이지 카드의 높이를 부모 요소에 맞추어 설정 */\n");
      out.write("	/* padding: 20px; */\n");
      out.write("	background-color: white;\n");
      out.write("	overflow-y: auto; /* 페이지 카드 내에서 스크롤 가능 */\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".page-card.active {\n");
      out.write("	display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write("footer {\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("	text-align: center;\n");
      out.write("	padding: 10px;\n");
      out.write("	margin-top: auto;\n");
      out.write("	width: 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 768px) {\n");
      out.write("	.sidebar-container {\n");
      out.write("		position: relative;\n");
      out.write("		width: 100%;\n");
      out.write("		height: auto;\n");
      out.write("		padding: 20px;\n");
      out.write("		overflow: hidden;\n");
      out.write("		transition: height 0.3s ease;\n");
      out.write("		z-index: 1000;\n");
      out.write("	}\n");
      out.write("	.sidebar-container.hidden {\n");
      out.write("		display: none;\n");
      out.write("	}\n");
      out.write("	.layout {\n");
      out.write("		flex-direction: column;\n");
      out.write("	}\n");
      out.write("	main {\n");
      out.write("		padding: 20px;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container {\n");
      out.write("	max-width: 1200px;\n");
      out.write("	margin: 20px auto;\n");
      out.write("	padding: 20px;\n");
      out.write("	background-color: white;\n");
      out.write("	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("	border-radius: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-buttons {\n");
      out.write("	text-align: center;\n");
      out.write("	margin: 20px auto;\n");
      out.write("	display: flex;\n");
      out.write("	flex-wrap: wrap;\n");
      out.write("	justify-content: center;\n");
      out.write("	max-width: 1050px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-buttons button {\n");
      out.write("	width: 120px;\n");
      out.write("	height: 40px;\n");
      out.write("	margin: 5px;\n");
      out.write("	border: none;\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("	font-size: 14px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	text-align: center;\n");
      out.write("	line-height: 40px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-buttons input[type=\"text\"] {\n");
      out.write("	width: 660px; /* 원하는 크기 설정 */\n");
      out.write("	padding: 10px;\n");
      out.write("	font-size: 16px;\n");
      out.write("	margin-right: 10px; /* 버튼과의 간격 */\n");
      out.write("	border: 1px solid #ddd;\n");
      out.write("	border-radius: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-buttons button:hover {\n");
      out.write("	background-color: #2179b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filter-buttons:nth-child(1) {\n");
      out.write("	margin-bottom: 30px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-grid {\n");
      out.write("	display: grid;\n");
      out.write("	grid-template-columns: repeat(4, 1fr);\n");
      out.write("	gap: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-item {\n");
      out.write("	background-color: #fff;\n");
      out.write("	border: 1px solid #ddd;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	overflow: hidden;\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	justify-content: space-between;\n");
      out.write("	transition: transform 0.3s, box-shadow 0.3s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-item:hover {\n");
      out.write("	transform: translateY(-10px);\n");
      out.write("	box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-item img {\n");
      out.write("	width: 100%;\n");
      out.write("	height: 100%;\n");
      out.write("	object-fit: cover;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-details {\n");
      out.write("	flex: 1;\n");
      out.write("	padding: 15px;\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	justify-content: space-between;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-title {\n");
      out.write("	font-size: 18px;\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("	color: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-title:hover {\n");
      out.write("	text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-organizer, .contest-dates {\n");
      out.write("	font-size: 14px;\n");
      out.write("	color: #666;\n");
      out.write("	margin-bottom: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-link {\n");
      out.write("	margin-top: auto;\n");
      out.write("	padding: 10px 15px;\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("	text-decoration: none;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	font-size: 14px;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-link:hover {\n");
      out.write("	background-color: #2179b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-buttons {\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: space-between;\n");
      out.write("	margin-bottom: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-add {\n");
      out.write("	background-color: #fff;\n");
      out.write("	border-radius: 10px;\n");
      out.write("	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n");
      out.write("	width: 400px;\n");
      out.write("	padding: 30px;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-delete-button {\n");
      out.write("	background-color: #FF4500;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 10px 47px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 14px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-edit-button {\n");
      out.write("	background-color: #FFB347;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	padding: 10px 47px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-size: 14px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".contest-edit-button:hover, .contest-delete-button:hover {\n");
      out.write("	background-color: #2179b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pagination {\n");
      out.write("	text-align: center;\n");
      out.write("	margin-top: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pagination a, .pagination span {\n");
      out.write("	display: inline-block;\n");
      out.write("	margin: 0 5px;\n");
      out.write("	padding: 10px 15px;\n");
      out.write("	color: #2a9df4;\n");
      out.write("	text-decoration: none;\n");
      out.write("	border: 1px solid #2a9df4;\n");
      out.write("	border-radius: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pagination a:hover {\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pagination .active {\n");
      out.write("	background-color: #2a9df4;\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#add-modal, #edit-modal, #delete-modal {\n");
      out.write("	display: none; /* 기본적으로 숨기기 */\n");
      out.write("	position: fixed;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	width: 80%;\n");
      out.write("	max-width: 500px;\n");
      out.write("	background-color: white;\n");
      out.write("	padding: 20px;\n");
      out.write("	box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n");
      out.write("	z-index: 1000;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 1200px) {\n");
      out.write("	.contest-grid {\n");
      out.write("		grid-template-columns: repeat(3, 1fr);\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 900px) {\n");
      out.write("	.contest-grid {\n");
      out.write("		grid-template-columns: repeat(2, 1fr);\n");
      out.write("	}\n");
      out.write("	header {\n");
      out.write("		font-size: 20px;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write("@media ( max-width : 600px) {\n");
      out.write("	.contest-grid {\n");
      out.write("		grid-template-columns: 1fr;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    \n");
      out.write("    	//login\n");
      out.write("    	// 로그인 상태 체크를 위한 변수\n");
      out.write("	    let isLoggedIn = false;\n");
      out.write("	\n");
      out.write("	    // 로그인 폼을 표시하는 함수\n");
      out.write("	    function showLogin() {\n");
      out.write("	    	window.location.href = context + '/login';\n");
      out.write("	    }\n");
      out.write("	\n");
      out.write("	    // 로그아웃 처리 함수\n");
      out.write("	    function logout() {\n");
      out.write("	    	// 로그아웃 폼을 생성하고 제출하는 함수\n");
      out.write("            const form = document.createElement('form');\n");
      out.write("            form.method = 'POST';\n");
      out.write("            form.action = 'logout';  // 로그아웃을 처리하는 서버의 URL\n");
      out.write("\n");
      out.write("            document.body.appendChild(form);  // 폼을 동적으로 문서에 추가\n");
      out.write("            form.submit();  // 폼 제출\n");
      out.write("	    }\n");
      out.write("	\n");
      out.write("	    // 페이지 로드 시 로그인 상태 초기화\n");
      out.write("	    /* document.addEventListener('DOMContentLoaded', function () {\n");
      out.write("	        if (isLoggedIn) {\n");
      out.write("	            document.getElementById(\"login-button\").style.display = \"none\";\n");
      out.write("	            document.getElementById(\"user-info\").style.display = \"block\";\n");
      out.write("	        } else {\n");
      out.write("	        	document.getElementById(\"login-button\").style.display = \"block\";\n");
      out.write("	            document.getElementById(\"user-info\").style.display = \"none\";\n");
      out.write("	        }\n");
      out.write("	    }); */\n");
      out.write("\n");
      out.write("	    function getExtension(url) {\n");
      out.write("	   		const regex = /\\.([0-9a-z]+)(?:[\\?#]|$)/i;\n");
      out.write("	    	const extension = url.match(regex);\n");
      out.write("	    	if (extension) {\n");
      out.write("	    	    return extension[1].toLowerCase();\n");
      out.write("	    	}\n");
      out.write("\n");
      out.write("	    	return '';\n");
      out.write("	    }\n");
      out.write("		\n");
      out.write("	 	// 페이지를 로드하고 카드를 동적으로 생성하는 함수\n");
      out.write("	    async function loadPage(pageId, pageUrl, reload = false ) {\n");
      out.write("	        const mainContent = document.querySelector('main');\n");
      out.write("	        const existingPage = document.getElementById(pageId);\n");
      out.write("\n");
      out.write("	        // 이미 로드된 페이지가 있으면 reload 조건에 따라 처리\n");
      out.write("	        if (existingPage) {\n");
      out.write("	            if (reload) {\n");
      out.write("	                existingPage.remove();\n");
      out.write("	            } else {\n");
      out.write("	                setActivePage(pageId);\n");
      out.write("	                return;\n");
      out.write("	            }\n");
      out.write("	        }\n");
      out.write("\n");
      out.write("	        // POST 요청을 보내면서 파라미터를 전달\n");
      out.write("	        const response = await fetch(pageUrl, {\n");
      out.write("	            method: getExtension(pageUrl) == 'html' ? 'GET':'POST'\n");
      out.write("	        });\n");
      out.write("	        \n");
      out.write("	        const isOk = response.ok;\n");
      out.write("	        const data = await response.text();\n");
      out.write("\n");
      out.write("	        if (!isOk) {\n");
      out.write("	            openModalFetch(data);  // 오류 발생 시 모달 창 호출\n");
      out.write("	        } else {\n");
      out.write("	            const newPageCard = document.createElement('div');\n");
      out.write("	            newPageCard.id = pageId;\n");
      out.write("	            newPageCard.classList.add('page-card');\n");
      out.write("	            newPageCard.innerHTML = data;\n");
      out.write("	            mainContent.appendChild(newPageCard);\n");
      out.write("	            setActivePage(pageId);\n");
      out.write("	            adjustPaddingForHome(pageId);\n");
      out.write("	            \n");
      out.write("	            // 페이지 내 script 태그 재실행 처리\n");
      out.write("	            const scripts = newPageCard.getElementsByTagName('script');\n");
      out.write("	            Array.from(scripts).forEach((script, i) => {\n");
      out.write("		            console.log()\n");
      out.write("	                /* const scriptId = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageId}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("_script_");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${i}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`; */\n");
      out.write("	                const scriptId = pageId + '_script_' + i;\n");
      out.write("	                console.log(pageId + '_script_' + i);\n");
      out.write("	                const existingScript = document.getElementById(scriptId);\n");
      out.write("	                if (existingScript) existingScript.remove();\n");
      out.write("	                \n");
      out.write("	                const newScript = document.createElement('script');\n");
      out.write("	                newScript.id = scriptId;\n");
      out.write("	                newScript.text = script.text;\n");
      out.write("	                document.body.appendChild(newScript);\n");
      out.write("	            });\n");
      out.write("	        }\n");
      out.write("	    }\n");
      out.write("\n");
      out.write("        \n");
      out.write("     	// padding을 home 페이지일 때만 0으로 설정하는 함수\n");
      out.write("        function adjustPaddingForHome(pageId) {\n");
      out.write("            const pageElement = document.getElementById(pageId);\n");
      out.write("            \n");
      out.write("            if (pageId === 'home') {\n");
      out.write("                pageElement.style.padding = '0px';  // home 페이지의 padding을 0으로 설정\n");
      out.write("            } else {\n");
      out.write("                pageElement.style.padding = '20px';  // 다른 페이지의 padding을 기본값으로 설정\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 특정 페이지를 활성화하는 함수\n");
      out.write("        function setActivePage(pageId) {\n");
      out.write("            const pages = document.querySelectorAll('.page-card');\n");
      out.write("            pages.forEach(page => {\n");
      out.write("                page.classList.remove('active');\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            const targetPage = document.getElementById(pageId);\n");
      out.write("            if (targetPage) {\n");
      out.write("                targetPage.classList.add('active');\n");
      out.write("                localStorage.setItem('currentPage', pageId); // 현재 페이지 상태 저장\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 서브메뉴 토글 함수\n");
      out.write("        function toggleSubmenu() {\n");
      out.write("            const submenu = document.getElementById('submenu');\n");
      out.write("            submenu.classList.toggle('active');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 메뉴 접기/펼치기 버튼 동작\n");
      out.write("        function toggleSidebar() {\n");
      out.write("            const sidebar = document.querySelector('.sidebar-container');\n");
      out.write("            sidebar.classList.toggle('hidden');\n");
      out.write("            sidebar.classList.toggle('active');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        document.addEventListener('DOMContentLoaded', function () {\n");
      out.write("           loadPage('home', 'html/home.html'); // 기본 페이지를 로드\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("    	// 팝업 메시지 표시\n");
      out.write("        function showPopupMessage() {\n");
      out.write("            document.getElementById('popup-message').style.display = 'block';\n");
      out.write("            document.getElementById('popup-background').style.display = 'block';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 팝업 메시지 숨기기\n");
      out.write("        function hidePopupMessage() {\n");
      out.write("            document.getElementById('popup-message').style.display = 'none';\n");
      out.write("            document.getElementById('popup-background').style.display = 'none';\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("     	// local에서 모달 창 열기\n");
      out.write("        function openModal(message) {\n");
      out.write("            document.getElementById('modal-message').innerText = message;\n");
      out.write("            document.getElementById('modal').style.display = 'block';\n");
      out.write("            document.getElementById('modal-background').style.display = 'block';\n");
      out.write("        }\n");
      out.write("     	\n");
      out.write("        // 모달 창 닫기\n");
      out.write("        function closeModal() {\n");
      out.write("            document.getElementById('modal').style.display = 'none';\n");
      out.write("            document.getElementById('modal-background').style.display = 'none';\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("     	// 모달 창 닫기\n");
      out.write("        function openModalFetch(html) {\n");
      out.write("            document.getElementById('modal').style.display = 'block';\n");
      out.write("            document.getElementById('modal-content').innerHTML= html;\n");
      out.write("            document.getElementById('modal-background').style.display = 'block';\n");
      out.write("        }\n");
      out.write("     	\n");
      out.write("\n");
      out.write("     	// 모달 밖 클릭 시 닫기\n");
      out.write("       /*  window.onclick = function(event) {\n");
      out.write("            if (event.target == document.getElementById('modal-background')) {\n");
      out.write("                closeModal();\n");
      out.write("            }\n");
      out.write("        } */\n");
      out.write("        \n");
      out.write("     \n");
      out.write("\n");
      out.write("     // 공모전 추가 모달 열기\n");
      out.write("        function showAddModal() {\n");
      out.write("            document.getElementById('add-modal').style.display = 'block';\n");
      out.write("            document.getElementById('modal-background').style.display = 'block';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function validateEditForm() {\n");
      out.write("            const title = document.getElementById('edit-title').value;\n");
      out.write("            const organizer = document.getElementById('edit-organizer').value;\n");
      out.write("            const startDay = document.getElementById('edit-start_day').value;\n");
      out.write("            const finishDay = document.getElementById('edit-finish_day').value;\n");
      out.write("            const homepage = document.getElementById('edit-homepage').value;\n");
      out.write("\n");
      out.write("            // 디버깅: 값 확인\n");
      out.write("            console.log('Title:', title);\n");
      out.write("            console.log('Organizer:', organizer);\n");
      out.write("            console.log('Start Date:', startDay);\n");
      out.write("            console.log('Finish Date:', finishDay);\n");
      out.write("            console.log('Homepage:', homepage);\n");
      out.write("\n");
      out.write("            if (!title || !organizer || !startDay || !finishDay || !homepage) {\n");
      out.write("                alert(\"모든 필드를 입력하세요.\");\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showEditModal(title, organizer, startDay, finishDay, homepage, img, num) {\n");
      out.write("            document.getElementById('edit-title').value = decodeURIComponent(title);\n");
      out.write("            document.getElementById('edit-organizer').value = decodeURIComponent(organizer);\n");
      out.write("            document.getElementById('edit-start_day').value = decodeURIComponent(startDay);\n");
      out.write("            document.getElementById('edit-finish_day').value = decodeURIComponent(finishDay);\n");
      out.write("            document.getElementById('edit-homepage').value = decodeURIComponent(homepage);\n");
      out.write("            document.getElementById('edit-img').value = decodeURIComponent(img);\n");
      out.write("            document.getElementById('edit-num').value = num;  // 여기가 중요합니다.\n");
      out.write("            \n");
      out.write("            document.getElementById('edit-modal').style.display = 'block';\n");
      out.write("            document.getElementById('modal-background').style.display = 'block';\n");
      out.write("        }\n");
      out.write("     \n");
      out.write("        function validateEditForm() {\n");
      out.write("            const title = document.getElementById('edit-title').value;\n");
      out.write("            const organizer = document.getElementById('edit-organizer').value;\n");
      out.write("            const startDay = document.getElementById('edit-start_day').value;\n");
      out.write("            const finishDay = document.getElementById('edit-finish_day').value;\n");
      out.write("            const homepage = document.getElementById('edit-homepage').value;\n");
      out.write("\n");
      out.write("            console.log('Title:', title);\n");
      out.write("            console.log('Organizer:', organizer);\n");
      out.write("            console.log('Start Date:', startDay);\n");
      out.write("            console.log('Finish Date:', finishDay);\n");
      out.write("            console.log('Homepage:', homepage);\n");
      out.write("\n");
      out.write("            if (!title || !organizer || !startDay || !finishDay || !homepage) {\n");
      out.write("                alert(\"모든 필드를 입력하세요.\");\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("     \n");
      out.write("        function submitEditForm() {\n");
      out.write("            const num = document.getElementById('edit-num').value;\n");
      out.write("            const title = document.getElementById('edit-title').value;\n");
      out.write("            const organizer = document.getElementById('edit-organizer').value;\n");
      out.write("            const startDay = document.getElementById('edit-start_day').value;\n");
      out.write("            const finishDay = document.getElementById('edit-finish_day').value;\n");
      out.write("            const homepage = document.getElementById('edit-homepage').value;\n");
      out.write("\n");
      out.write("            console.log('Submitting form with the following data:');\n");
      out.write("            console.log('Num:', num);\n");
      out.write("            console.log('Title:', title);\n");
      out.write("            console.log('Organizer:', organizer);\n");
      out.write("            console.log('Start Day:', startDay);\n");
      out.write("            console.log('Finish Day:', finishDay);\n");
      out.write("            console.log('Homepage:', homepage);\n");
      out.write("\n");
      out.write("            const xhr = new XMLHttpRequest();\n");
      out.write("            xhr.open('POST', 'index.jsp', true);\n");
      out.write("            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n");
      out.write("\n");
      out.write("            xhr.onreadystatechange = function() {\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\n");
      out.write("                    console.log(xhr.responseText); // 서버 응답을 콘솔에 출력\n");
      out.write("                    window.location.reload(); // 페이지 새로 고침\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            xhr.send('action=edit&num=' + encodeURIComponent(num) + \n");
      out.write("                     '&title=' + encodeURIComponent(title) +\n");
      out.write("                     '&organizer=' + encodeURIComponent(organizer) +\n");
      out.write("                     '&start_day=' + encodeURIComponent(startDay) +\n");
      out.write("                     '&finish_day=' + encodeURIComponent(finishDay) +\n");
      out.write("                     '&homepage=' + encodeURIComponent(homepage));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("     // 공모전 삭제 모달 열기\n");
      out.write("        function showDeleteModal(title) {\n");
      out.write("            // 삭제 모달에 공모전 제목 설정\n");
      out.write("            document.getElementById('delete-title').innerText = title;\n");
      out.write("\n");
      out.write("            // 모달 띄우기\n");
      out.write("            document.getElementById('delete-modal').style.display = 'block';\n");
      out.write("            document.getElementById('modal-background').style.display = 'block';\n");
      out.write("\n");
      out.write("            // 삭제할 공모전 제목 저장\n");
      out.write("            document.getElementById('delete-contest-title').value = title;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("     	// 공모전 삭제 처리\n");
      out.write("        function deleteContest() {\n");
      out.write("		    var title = document.getElementById('delete-contest-title').value;\n");
      out.write("		\n");
      out.write("		    // AJAX를 사용하여 서버로 삭제 요청\n");
      out.write("		    var xhr = new XMLHttpRequest();\n");
      out.write("		    xhr.open(\"POST\", \"index.jsp\", true);\n");
      out.write("		    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n");
      out.write("		\n");
      out.write("		    // 폼 데이터를 서버에 전송 (삭제할 제목 포함)\n");
      out.write("		    var params = \"action=delete&contestTitle=\" + encodeURIComponent(title);\n");
      out.write("		\n");
      out.write("		    // 서버에서 삭제 처리 후 성공하면 페이지 새로고침\n");
      out.write("		    xhr.onreadystatechange = function() {\n");
      out.write("		        if (xhr.readyState === 4 && xhr.status === 200) {\n");
      out.write("		            // 서버 응답 처리 후 페이지 새로 고침\n");
      out.write("		            window.location.reload();  // 삭제 후 페이지 새로 고침\n");
      out.write("		        }\n");
      out.write("		    };\n");
      out.write("		\n");
      out.write("		    // 서버로 요청 전송\n");
      out.write("		    xhr.send(params);\n");
      out.write("		}\n");
      out.write("     	\n");
      out.write("     	// 모달 닫기\n");
      out.write("        function closeModal() {\n");
      out.write("            document.getElementById('add-modal').style.display = 'none';\n");
      out.write("            document.getElementById('edit-modal').style.display = 'none';\n");
      out.write("            document.getElementById('delete-modal').style.display = 'none';\n");
      out.write("            document.getElementById('modal-background').style.display = 'none';\n");
      out.write("        }\n");
      out.write("     \n");
      out.write("     \n");
      out.write("        \n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<header>\n");
      out.write("		<button onclick=\"toggleSidebar()\">☰</button>\n");
      out.write("		<a href=\"index.jsp\" id=\"site-name\">공모전 다모아</a>\n");
      out.write("		<!-- 사이트 이름을 클릭하면 홈으로 이동 -->\n");
      out.write("		<div id=\"auth-section\">\n");
      out.write("			<!-- 로그인 또는 사용자 정보가 표시되는 영역 -->\n");
      out.write("			");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("			");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("		</div>\n");
      out.write("	</header>\n");
      out.write("\n");
      out.write("	<div class=\"layout\">\n");
      out.write("		<div class=\"sidebar-container hidden\">\n");
      out.write("			<nav>\n");
      out.write("				<ul>\n");
      out.write("					<li><a href=\"index.jsp\">홈</a></li>\n");
      out.write("					");
      out.write("\n");
      out.write("					<li><a href=\"#\" onclick=\"toggleSubmenu()\">사용자 관리</a></li>\n");
      out.write("					<ul id=\"submenu\" class=\"submenu\">\n");
      out.write("						<li><a href=\"#\"\n");
      out.write("							onclick=\"loadPage('userList', 'user/userlist')\">사용자 목록</a></li>\n");
      out.write("						<li><a href=\"#\" onclick=\"loadPage('user', 'user/form', true)\">사용자\n");
      out.write("								입력</a></li>\n");
      out.write("					</ul>\n");
      out.write("					<li><a href=\"#\" onclick=\"loadPage('service', 'service.html')\">서비스</a></li>\n");
      out.write("					<li><a href=\"#\" onclick=\"loadPage('contact', 'contact.html')\">연락처</a></li>\n");
      out.write("					");
      out.write("\n");
      out.write("				</ul>\n");
      out.write("			</nav>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<main>\n");
      out.write("			<!-- 페이지 카드들이 동적으로 여기에 생성됩니다 -->\n");
      out.write("		</main>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<div class=\"filter-buttons\">\n");
      out.write("		<form method=\"get\" action=\"index.jsp\">\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"전체\">전체</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"기획/아이디어\">기획/아이디어</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"광고/마케팅\">광고/마케팅</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"논문/리포트\">논문/리포트</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"영상/UCC/사진\">영상/UCC/사진</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"디자인/캐릭터/웹툰\">디자인/캐릭터/웹툰</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"웹/모바일/IT\">웹/모바일/IT</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"게임/소프트웨어\">게임/소프트웨어</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"문학/글/시나리오\">문학/글/시나리오</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"과학/공학\">과학/공학</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"건축/인테리어\">건축/인테리어</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"봉사활동\">봉사활동</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"취업/창업\">취업/창업</button>\n");
      out.write("			<button type=\"submit\" name=\"category\" value=\"기타\">기타</button>\n");
      out.write("		</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("		<!-- 검색 기능 추가 -->\n");
      out.write("		<form method=\"get\" action=\"index.jsp\">\n");
      out.write("			<input type=\"text\" name=\"search\" placeholder=\"공모전 제목을 입력하세요\"\n");
      out.write("				value=\"");
      out.print(request.getParameter("search") != null ? request.getParameter("search") : "");
      out.write("\">\n");
      out.write("			<button type=\"submit\">검색</button>\n");
      out.write("		</form>\n");
      out.write("		<button onclick=\"showAddModal()\">공모전 추가</button>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<!-- 공모전 추가 모달 -->\n");
      out.write("	<div id=\"add-modal\" style=\"display: none;\">\n");
      out.write("		<h2>공모전 추가</h2>\n");
      out.write("		<form method=\"POST\" action=\"index.jsp\"\n");
      out.write("			onsubmit=\"return validateAddForm()\">\n");
      out.write("			<input type=\"hidden\" name=\"action\" value=\"add\"> <label>제목:\n");
      out.write("				<input type=\"text\" id=\"title\" name=\"title\" required>\n");
      out.write("			</label><br> <label>주최: <input type=\"text\" id=\"organizer\"\n");
      out.write("				name=\"organizer\" required>\n");
      out.write("			</label><br> <label>카테고리: <select id=\"field\" name=\"field\"\n");
      out.write("				required>\n");
      out.write("					<option value=\"기획/아이디어\">기획/아이디어</option>\n");
      out.write("					<option value=\"광고/마케팅\">광고/마케팅</option>\n");
      out.write("					<option value=\"논문/리포트\">논문/리포트</option>\n");
      out.write("					<option value=\"영상/UCC/사진\">영상/UCC/사진</option>\n");
      out.write("					<option value=\"디자인/캐릭터/웹툰\">디자인/캐릭터/웹툰</option>\n");
      out.write("					<option value=\"웹/모바일/IT\">웹/모바일/IT</option>\n");
      out.write("					<option value=\"게임/소프트웨어\">게임/소프트웨어</option>\n");
      out.write("					<option value=\"문학/글/시나리오\">문학/글/시나리오</option>\n");
      out.write("					<option value=\"과학/공학\">과학/공학</option>\n");
      out.write("					<option value=\"건축/인테리어\">건축/인테리어</option>\n");
      out.write("					<option value=\"봉사활동\">봉사활동</option>\n");
      out.write("					<option value=\"취업/창업\">취업/창업</option>\n");
      out.write("					<option value=\"기타\">기타</option>\n");
      out.write("			</select>\n");
      out.write("			</label><br> <label>시작일: <input type=\"date\" id=\"start_day\"\n");
      out.write("				name=\"start_day\" required>\n");
      out.write("			</label><br> <label>종료일: <input type=\"date\" id=\"finish_day\"\n");
      out.write("				name=\"finish_day\" required>\n");
      out.write("			</label><br> <label>홈페이지: <input type=\"url\" id=\"homepage\"\n");
      out.write("				name=\"homepage\" required>\n");
      out.write("			</label><br> <label>이미지 URL: <input type=\"url\" id=\"img\"\n");
      out.write("				name=\"img\" required>\n");
      out.write("			</label><br>\n");
      out.write("			<button type=\"submit\">추가</button>\n");
      out.write("			<button type=\"button\" onclick=\"closeModal()\">닫기</button>\n");
      out.write("		</form>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 공모전 수정 모달 -->\n");
      out.write("	<div id=\"edit-modal\" style=\"display: none;\">\n");
      out.write("		<h2>공모전 수정</h2>\n");
      out.write("		<form method=\"POST\" action=\"index.jsp\"\n");
      out.write("			onsubmit=\"return validateEditForm()\">\n");
      out.write("			<input type=\"hidden\" name=\"action\" value=\"edit\"> <input\n");
      out.write("				type=\"hidden\" id=\"edit-num\" name=\"num\"> <label>제목: <input\n");
      out.write("				type=\"text\" id=\"edit-title\" name=\"title\" required>\n");
      out.write("			</label><br> <label>주최: <input type=\"text\" id=\"edit-organizer\"\n");
      out.write("				name=\"organizer\" required>\n");
      out.write("			</label><br> <label>시작일: <input type=\"date\" id=\"edit-start_day\"\n");
      out.write("				name=\"start_day\" required>\n");
      out.write("			</label><br> <label>종료일: <input type=\"date\" id=\"edit-finish_day\"\n");
      out.write("				name=\"finish_day\" required>\n");
      out.write("			</label><br> <label>홈페이지: <input type=\"url\" id=\"edit-homepage\"\n");
      out.write("				name=\"homepage\" required>\n");
      out.write("			</label><br> <label>이미지 URL: <input type=\"url\" id=\"edit-img\"\n");
      out.write("				name=\"img\" required>\n");
      out.write("			</label><br>\n");
      out.write("\n");
      out.write("			<button type=\"submit\">수정</button>\n");
      out.write("			<button type=\"button\" onclick=\"closeModal()\">닫기</button>\n");
      out.write("		</form>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 공모전 삭제 모달 -->\n");
      out.write("	<div id=\"delete-modal\" style=\"display: none;\">\n");
      out.write("		<h2>공모전 삭제</h2>\n");
      out.write("		<p>\n");
      out.write("			정말로 <span id=\"delete-title\"></span> 공모전을 삭제하시겠습니까?\n");
      out.write("		</p>\n");
      out.write("		<div class=\"modal-buttons\">\n");
      out.write("			<input type=\"hidden\" id=\"delete-contest-title\" />\n");
      out.write("			<button class=\"delete-button\" onclick=\"deleteContest()\">삭제</button>\n");
      out.write("			<button class=\"cancel-button\" type=\"button\" onclick=\"closeModal()\">취소</button>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<div class=\"contest-grid\">\n");
      out.write("			");

			int contestsPerPage = 16;
			int currentPage = 1;
			int totalPages = 0;
			if (request.getParameter("page") != null) {
				currentPage = Integer.parseInt(request.getParameter("page"));
			}
			int offset = (currentPage - 1) * contestsPerPage;

			String category = request.getParameter("category");
			if (category == null || category.equals("전체")) {
				category = "전체";
			}

			String searchKeyword = request.getParameter("search");

			java.util.Map<String, String[]> categoryKeywords = new java.util.HashMap<>();
			categoryKeywords.put("기획/아이디어", new String[] { "기획", "아이디어" });
			categoryKeywords.put("광고/마케팅", new String[] { "광고", "마케팅" });
			categoryKeywords.put("논문/리포트", new String[] { "논문", "리포트" });
			categoryKeywords.put("영상/UCC/사진", new String[] { "영상", "UCC", "사진" });
			categoryKeywords.put("디자인/캐릭터/웹툰", new String[] { "디자인", "캐릭터", "웹툰" });
			categoryKeywords.put("웹/모바일/IT", new String[] { "웹", "모바일", "IT" });
			categoryKeywords.put("게임/소프트웨어", new String[] { "게임", "소프트웨어" });
			categoryKeywords.put("문학/글/시나리오", new String[] { "문학", "글", "시나리오" });
			categoryKeywords.put("과학/공학", new String[] { "과학", "공학" });
			categoryKeywords.put("건축/인테리어", new String[] { "건축", "인테리어" });
			categoryKeywords.put("봉사활동", new String[] { "봉사" });
			categoryKeywords.put("취업/창업", new String[] { "취업", "창업" });
			categoryKeywords.put("기타", new String[] { "기타" });

			String dbUrl = "jdbc:mysql://localhost:3306/cswp_202221889_db";
			String dbUser = "cswp_202221889_fe";
			String dbPassword = "202221889";

			try {
				Class.forName("com.mysql.cj.jdbc.Driver");
				java.sql.Connection conn = java.sql.DriverManager.getConnection(dbUrl, dbUser, dbPassword);
				java.sql.Statement stmt = conn.createStatement();

				// 카테고리 필터링과 검색어를 반영한 쿼리
				String countQuery = "SELECT COUNT(*) AS total FROM contests WHERE 1=1";
				if (!category.equals("전체")) {
					String[] keywords = categoryKeywords.get(category);
					StringBuilder condition = new StringBuilder();
					for (int i = 0; i < keywords.length; i++) {
				condition.append("field LIKE '%").append(keywords[i]).append("%'");
				if (i < keywords.length - 1) {
					condition.append(" OR ");
				}
					}
					countQuery += " AND (" + condition.toString() + ")";
				}

				if (searchKeyword != null && !searchKeyword.isEmpty()) {
					countQuery += " AND title LIKE '%" + searchKeyword + "%'";
				}

				java.sql.ResultSet countRs = stmt.executeQuery(countQuery);
				if (countRs.next()) {
					int totalContests = countRs.getInt("total");
					totalPages = (int) Math.ceil((double) totalContests / contestsPerPage);
				}

				String query = "SELECT * FROM contests WHERE 1=1";
				if (!category.equals("전체")) {
					String[] keywords = categoryKeywords.get(category);
					StringBuilder condition = new StringBuilder();
					for (int i = 0; i < keywords.length; i++) {
				condition.append("field LIKE '%").append(keywords[i]).append("%'");
				if (i < keywords.length - 1) {
					condition.append(" OR ");
				}
					}
					query += " AND (" + condition.toString() + ")";
				}

				if (searchKeyword != null && !searchKeyword.isEmpty()) {
					query += " AND title LIKE '%" + searchKeyword + "%'";
				}

				query += " LIMIT " + contestsPerPage + " OFFSET " + offset;

				java.sql.ResultSet rs = stmt.executeQuery(query);

				while (rs.next()) {
					String num = rs.getString("num");
					String img = rs.getString("img");
					String title = rs.getString("title");
					String organizer = rs.getString("organizer");
					String field = rs.getString("field");
					String startDay = rs.getString("start_day");
					String finishDay = rs.getString("finish_day");
					String homepage = rs.getString("homepage");
			
      out.write("\n");
      out.write("			<div class=\"contest-item\">\n");
      out.write("				<img src=\"");
      out.print(img);
      out.write("\" alt=\"공모전 이미지\">\n");
      out.write("				<div class=\"contest-details\">\n");
      out.write("					<a href=\"");
      out.print(homepage);
      out.write("\" target=\"_blank\" class=\"contest-title\">");
      out.print(title);
      out.write("</a>\n");
      out.write("					<p class=\"contest-organizer\">\n");
      out.write("						주최:\n");
      out.write("						");
      out.print(organizer);
      out.write("\n");
      out.write("					</p>\n");
      out.write("					<p class=\"contest-organizer\">\n");
      out.write("						분야:\n");
      out.write("						");
      out.print(field);
      out.write("\n");
      out.write("					</p>\n");
      out.write("					<p class=\"contest-dates\">\n");
      out.write("						기간:\n");
      out.write("						");
      out.print(startDay);
      out.write("\n");
      out.write("						~\n");
      out.write("						");
      out.print(finishDay);
      out.write("\n");
      out.write("					</p>\n");
      out.write("\n");
      out.write("					<!-- 수정, 삭제 버튼 추가 -->\n");
      out.write("					<div class=\"contest-buttons\">\n");
      out.write("						<button class=\"contest-edit-button\"\n");
      out.write("							onclick=\"showEditModal('");
      out.print(URLEncoder.encode(title, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(URLEncoder.encode(organizer, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(URLEncoder.encode(startDay, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(URLEncoder.encode(finishDay, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(URLEncoder.encode(homepage, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(URLEncoder.encode(img, "UTF-8"));
      out.write("', \n");
      out.write("                           '");
      out.print(num);
      out.write("')\">수정</button>\n");
      out.write("						<button class=\"contest-delete-button\"\n");
      out.write("							onclick=\"showDeleteModal('");
      out.print(title);
      out.write("')\">삭제</button>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("					<a href=\"");
      out.print(homepage);
      out.write("\" target=\"_blank\" class=\"contest-link\">자세히\n");
      out.write("						보기</a>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			");

			}
			conn.close();
			} catch (Exception e) {
			out.println("<p>데이터를 불러오는 중 오류가 발생했습니다: " + e.getMessage() + "</p>");
			}
			
      out.write("\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"pagination\">\n");
      out.write("			");

			int pageRange = 5;
			int groupStart = ((currentPage - 1) / pageRange) * pageRange + 1;
			int groupEnd = Math.min(groupStart + pageRange - 1, totalPages);

			if (groupStart > 1) {
			
      out.write("\n");
      out.write("			<a href=\"?page=");
      out.print(groupStart - 1);
      out.write("&category=");
      out.print(category);
      out.write("\">&laquo;\n");
      out.write("				이전</a>\n");
      out.write("			");

			}

			for (int i = groupStart; i <= groupEnd; i++) {
			if (i == currentPage) {
			
      out.write("\n");
      out.write("			<span class=\"active\">");
      out.print(i);
      out.write("</span>\n");
      out.write("			");

			} else {
			
      out.write("\n");
      out.write("			<a href=\"?page=");
      out.print(i);
      out.write("&category=");
      out.print(category);
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a>\n");
      out.write("			");

			}
			}

			if (groupEnd < totalPages) {
			
      out.write("\n");
      out.write("			<a href=\"?page=");
      out.print(groupEnd + 1);
      out.write("&category=");
      out.print(category);
      out.write("\">다음\n");
      out.write("				&raquo;</a>\n");
      out.write("			");

			}
			
      out.write("\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<footer> © 2024 내 웹사이트 - 모든 권리 보유 </footer>\n");
      out.write("\n");
      out.write("	");

	String action = request.getParameter("action");

	if ("add".equals(action)) {
	    // 공모전 추가 처리
	    String title = request.getParameter("title");
	    String organizer = request.getParameter("organizer");
	    String[] fields = request.getParameterValues("field");  // 여러 카테고리를 받음
	    String startDay = request.getParameter("start_day");
	    String finishDay = request.getParameter("finish_day");
	    String homepage = request.getParameter("homepage");
	    String img = request.getParameter("img");

	    // 각 선택된 카테고리를 하나의 문자열로 합침
	    String field = String.join(", ", fields);  // 카테고리들 간에 쉼표로 구분하여 저장

	    try {
	        Class.forName("com.mysql.cj.jdbc.Driver");
	        Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
	        String insertQuery = "INSERT INTO contests (title, organizer, field, start_day, finish_day, homepage, img) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        PreparedStatement ps = conn.prepareStatement(insertQuery);
	        ps.setString(1, title);
	        ps.setString(2, organizer);
	        ps.setString(3, field);  // 여러 카테고리 값 저장
	        ps.setString(4, startDay);
	        ps.setString(5, finishDay);
	        ps.setString(6, homepage);
	        ps.setString(7, img); // 이미지 URL을 데이터베이스에 저장

	        int rowsAffected = ps.executeUpdate();
	        if (rowsAffected > 0) {
	            out.println("<p>공모전이 추가되었습니다.</p>");
	        } else {
	            out.println("<p>공모전 추가 실패.</p>");
	        }
	        conn.close();
	    } catch (Exception e) {
	        out.println("<p>오류 발생: " + e.getMessage() + "</p>");
	    }
	}

	if ("edit".equals(action)) {
		String num = request.getParameter("num"); // 수정할 공모전의 num을 받습니다.
		String title = request.getParameter("title");
		String organizer = request.getParameter("organizer");
		String startDay = request.getParameter("start_day");
		String finishDay = request.getParameter("finish_day");
		String homepage = request.getParameter("homepage");
		String img = request.getParameter("img");

		try {
			// 디코딩
			title = URLDecoder.decode(title, "UTF-8");
			organizer = URLDecoder.decode(organizer, "UTF-8");
			startDay = URLDecoder.decode(startDay, "UTF-8");
			finishDay = URLDecoder.decode(finishDay, "UTF-8");
			homepage = URLDecoder.decode(homepage, "UTF-8");

			// 로그 추가
			System.out.println("Updating contest with the following data:");
			System.out.println("Num: " + num);
			System.out.println("Title: " + title);
			System.out.println("Organizer: " + organizer);
			System.out.println("Start Day: " + startDay);
			System.out.println("Finish Day: " + finishDay);
			System.out.println("Homepage: " + homepage);

			// 데이터베이스 연결
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
			String updateQuery = "UPDATE contests SET title = ?, organizer = ?, start_day = ?, finish_day = ?, homepage = ?, img = ? WHERE num = ?";
			PreparedStatement ps = conn.prepareStatement(updateQuery);
			ps.setString(1, title);
			ps.setString(2, organizer);
			ps.setString(3, startDay);
			ps.setString(4, finishDay);
			ps.setString(5, homepage);
			ps.setString(6, img);
			ps.setString(7, num); // num을 기준으로 업데이트

			int rowsAffected = ps.executeUpdate();
			if (rowsAffected > 0) {
		out.println("<p>공모전 '" + title + "'이 수정되었습니다.</p>");
			} else {
		out.println("<p>공모전 수정 실패. 해당 num의 공모전이 존재하지 않습니다.</p>");
			}
			conn.close();
		} catch (Exception e) {
			out.println("<p>오류 발생: " + e.getMessage() + "</p>");
		}
	}

	// 공모전 삭제 처리
	if ("delete".equals(action)) {
		String contestTitle = request.getParameter("contestTitle");

		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

			// 공모전 삭제 쿼리
			String deleteQuery = "DELETE FROM contests WHERE title = ?";
			PreparedStatement ps = conn.prepareStatement(deleteQuery);
			ps.setString(1, contestTitle);

			int rowsAffected = ps.executeUpdate();
			if (rowsAffected > 0) {
		out.println("<p>공모전 '" + contestTitle + "'이 삭제되었습니다.</p>");
			} else {
		out.println("<p>공모전 삭제 실패. 해당 제목의 공모전이 존재하지 않습니다.</p>");
			}
			conn.close();
		} catch (Exception e) {
			out.println("<p>오류 발생: " + e.getMessage() + "</p>");
		}
	}
	
      out.write("\n");
      out.write("\n");
      out.write("	<!-- 팝업 배경 -->\n");
      out.write("	<div id=\"popup-background\" onclick=\"hidePopupMessage()\"></div>\n");
      out.write("\n");
      out.write("	<!-- 팝업 메시지 창 -->\n");
      out.write("	<div id=\"popup-message\">\n");
      out.write("		<h2>알림</h2>\n");
      out.write("		<p>이것은 팝업 메시지입니다.</p>\n");
      out.write("		<button onclick=\"hidePopupMessage()\">닫기</button>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<!-- 모달 배경 -->\n");
      out.write("	<div id=\"modal-background\"></div>\n");
      out.write("\n");
      out.write("	<!-- 모달 창 -->\n");
      out.write("	<div id=\"modal\">\n");
      out.write("		<div id=\"modal-content\">\n");
      out.write("			<h2 id=\"modal-title\">알림</h2>\n");
      out.write("			<p id=\"modal-message\">이것은 모달 팝업 메시지입니다.</p>\n");
      out.write("		</div>\n");
      out.write("		<button onclick=\"closeModal()\">닫기</button>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /index.jsp(1116,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty sessionScope.user}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("				<button id=\"login-button\" onclick=\"showLogin()\">로그인</button>\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /index.jsp(1119,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.user}", boolean.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("				<div id=\"user-info\"\n");
          out.write("					style=\"display: ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.user ? block : none}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(" ;\">\n");
          out.write("					<span id=\"username\"\n");
          out.write("						title=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.roles[0]}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(' ');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.email}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.user.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</span>\n");
          out.write("					<button id=\"logout-button\" onclick=\"logout()\">로그아웃</button>\n");
          out.write("				</div>\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }
}
